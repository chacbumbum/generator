<?php
/**
 * @Author: Duong The
 * @Date:   2016-05-30 08:45:25
 * @Last Modified by:   thedv
 * @Last Modified time: 2016-07-29 16:30:49
 */

namespace Qsoft\Generator\Http\Controllers;

use App\Http\Controllers\Controller;
use Carbon\Carbon;
use File;
use Illuminate\Console\AppNamespaceDetectorTrait;
use Illuminate\Http\Request;
use Qsoft\Generator\Ultis\Generator;
use Twig_Autoloader;
use Twig_Environment;
use Twig_Loader_Filesystem;
use Zipper;

class GenerateController extends Controller
{
    use AppNamespaceDetectorTrait;

    /**
     * [$namespace description]
     * @var [type]
     */
    protected $namespace;

    /**
     * [$migration description]
     * @var [type]
     */
    protected $migration;

    /**
     * [$model description]
     * @var [type]
     */
    protected $model;

    /**
     * [$controller description]
     * @var [type]
     */
    protected $controller;

    /**
     * [$route description]
     * @var [type]
     */
    protected $route;

    /**
     * [$angular description]
     * @var [type]
     */
    protected $angular;

    /**
     * [$angularController description]
     * @var [type]
     */
    protected $angularController;

    /**
     * [$angularService description]
     * @var [type]
     */
    protected $angularService;

    /**
     * [$angularRouter description]
     * @var [type]
     */
    protected $angularRouter;

    /**
     * [$angularView description]
     * @var [type]
     */
    protected $angularView;

    /**
     * [$angularForm description]
     * @var [type]
     */
    protected $angularForm;

    /**
     * [$angularDetail description]
     * @var [type]
     */
    protected $angularDetail;

    /**
     * [$serverPath description]
     * @var [type]
     */
    protected $serverPath;

    /**
     * [$clientPath description]
     * @var [type]
     */
    protected $clientPath;

    /**
     * [$generatorPath description]
     * @var [type]
     */
    protected $generatorPath;

    /**
     * [$zip description]
     * @var [type]
     */
    protected $zip;

    /**
     * [__construct description]
     */
    public function __construct(Zipper $zip)
    {
        Twig_Autoloader::register();

        $php                     = new Twig_Loader_Filesystem(config('qsoft-generator.template_path') . '/server');
        $angular                 = new Twig_Loader_Filesystem(config('qsoft-generator.template_path') . '/angular');
        $server                  = new Twig_Environment($php);
        $this->angular           = new Twig_Environment($angular);
        $this->angularController = $this->angular->loadTemplate('controller.js.twig');
        $this->angularService    = $this->angular->loadTemplate('service.js.twig');
        $this->angularRouter     = $this->angular->loadTemplate('router.js.twig');
        $this->angularView       = $this->angular->loadTemplate('list-view.html.twig');
        $this->angularForm       = $this->angular->loadTemplate('form.html.twig');
        $this->angularDetail     = $this->angular->loadTemplate('detail.html.twig');
        $this->migration         = $server->loadTemplate('migration.php.twig');
        $this->model             = $server->loadTemplate('model.php.twig');
        $this->controller        = $server->loadTemplate('controller.php.twig');
        $this->route             = $server->loadTemplate('route.php.twig');
        $this->generatorPath     = config('qsoft-generator.generator_path');
        $this->zip               = $zip;
        $this->namespace         = $this->getAppNamespace();

    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        $gen  = new Generator;
        $file = $gen->create($request->all());

        if ($file) {
            return response()->json(['message' => 'Thành công rồi. Ahihi!', 'data' => $file]);
        } else {
            return response()->json(['message' => 'Có gì đó sai sai!'], 400);
        }

    }

    /**
     * [generateMigration description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    protected function generateMigration(Request $request)
    {
        $table_name = $request->has('table_name') ? $request->table_name : snake_case(str_plural($request->name));
        $migration  = $this->migration->render([
            'model' => [
                'options'    => $request->options,
                'name'       => studly_case(str_plural($request->name)),
                'table_name' => $table_name,
                'fields'     => $request->fields,
            ],
        ]);

        $time = Carbon::now()->format('Y_m_d_His');
        $name = $time . '_create_' . snake_case(str_plural($request->name)) . '_table.php';
        File::put($this->serverPath . '/' . $name, $migration);
        return $migration;
    }

    /**
     * [generateModel description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    protected function generateModel(Request $request)
    {
        //$table_name = $request->has('table_name') ? $request->table_name : snake_case(str_plural($request->name));
        $table_name = $request->has('table_name') ? $request->table_name : false;
        $model      = $this->model->render([
            'model' => [
                'namespace'  => $this->namespace,
                'options'    => $request->options,
                'name'       => studly_case(str_singular($request->name)),
                'table_name' => $table_name,
                'fields'     => $request->fields,
            ],
        ]);

        $modelName = studly_case(str_singular($request->name)) . '.php';
        File::put($this->serverPath . '/' . $modelName, $model);
        return $model;
    }

    /**
     * [generateController description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    public function generateController(Request $request)
    {
        $controller = $this->controller->render([
            'model' => [
                'namespace'      => $this->namespace,
                'options'        => $request->options,
                'controllerName' => studly_case(str_singular($request->name)),
                'modelName'      => studly_case(str_singular($request->name)),
                'fields'         => $request->fields,
            ],
        ]);

        $controllerName = studly_case(str_singular($request->name)) . 'Controller.php';
        File::put($this->serverPath . '/' . $controllerName, $controller);
        return $controller;
    }

    /**
     * [generateController description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    public function generateRoute(Request $request)
    {
        $route = $this->route->render([
            'model' => [
                'options'        => $request->options,
                'controllerName' => studly_case(str_singular($request->name)),
                'prefix'         => str_slug($request->name, '-'),
                'fields'         => $request->fields,
            ],
        ]);

        $routeName = 'routes.php';
        File::put($this->serverPath . '/' . $routeName, $route);
        return $route;
    }

    /**
     * [generateAngularController description]
     * @param  [type] $request [description]
     * @return [type]          [description]
     */
    protected function generateAngularController(Request $request)
    {
        $angularController = $this->angularController->render([
            'model' => [
                'controllerModule' => config('qsoft-generator.angular_controller'),
                'controllerName'   => studly_case(str_singular($request->name)),
                'serviceName'      => camel_case($request->name),
                'options'          => $request->options,
                'name'             => studly_case(str_singular($request->name)),
                'table_name'       => snake_case(str_plural($request->name)),
                'prefix'           => str_slug($request->name, '-'),
                'fields'           => $request->fields,
            ],
        ]);

        File::put($this->clientPath . '/' . str_slug($request->name, '-') . '.controller.js', $angularController);
        return $angularController;
    }

    /**
     * [generateAngularService description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    protected function generateAngularService(Request $request)
    {
        $angularService = $this->angularService->render([
            'model' => [
                'serviceName' => config('qsoft-generator.angular_service'),
                'options'     => $request->options,
                'name'        => camel_case($request->name),
                'prefix'      => str_slug($request->name, '-'),
                'fields'      => $request->fields,
            ],
        ]);

        File::put($this->clientPath . '/' . str_slug($request->name, '-') . '.service.js', $angularService);
        return $angularService;
    }

    /**
     * [generateAngularRoute description]
     * @return [type] [description]
     */
    protected function generateAngularRoute(Request $request)
    {
        $route         = $request->has('router') ? $request->router : str_slug($request->name, '-');
        $angularRouter = $this->angularRouter->render([
            'model' => [
                'routeModel'     => config('qsoft-generator.angular_route'),
                'serviceName'    => camel_case($request->name),
                'controllerName' => studly_case(str_singular($request->name)),
                'options'        => $request->options,
                'name'           => $request->name,
                'url'            => $route,
                'prefix'         => str_slug($request->name, '-'),
                'fields'         => $request->fields,
            ],
        ]);

        File::put($this->clientPath . '/' . str_slug($request->name, '-') . '.route.js', $angularRouter);
        return $angularRouter;
    }

    /**
     * [generateAngularView description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    private function generateAngularView(Request $request)
    {
        $angularView = $this->angularView->render([
            'model' => [
                'routeModel'     => config('qsoft-generator.angular_route'),
                'serviceName'    => camel_case($request->name),
                'controllerName' => studly_case($request->name),
                'options'        => $request->options,
                'name'           => $request->name,
                'prefix'         => str_slug($request->name, '-'),
                'fields'         => $request->fields,
            ],
        ]);

        File::put($this->clientPath . '/index.tpl.html', $angularView);
        return $angularView;
    }

    /**
     * [generateAngularForm description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    private function generateAngularForm(Request $request)
    {
        $angularForm = $this->angularForm->render([
            'model' => [
                'routeModel'     => config('qsoft-generator.angular_route'),
                'serviceName'    => camel_case($request->name),
                'controllerName' => studly_case($request->name),
                'options'        => $request->options,
                'name'           => $request->name,
                'prefix'         => str_slug($request->name, '-'),
                'fields'         => $request->fields,
            ],
        ]);

        File::put($this->clientPath . '/form.tpl.html', $angularForm);
        return $angularForm;
    }

    private function generateAngularDetail(Request $request)
    {
        $angularDetail = $this->angularDetail->render([
            'model' => [
                'name' => $request->name,
            ],
        ]);

        File::put($this->clientPath . '/detail.tpl.html', $angularDetail);
        return $angularDetail;
    }

    /**
     * [makeClientDirectory description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    private function makeClientDirectory(Request $request)
    {
        $path = $this->clientPath . '/' . str_slug($request->name, '-');
        if (!File::exists($path)) {
            File::makeDirectory($path, null, true, true);
        }
        return $path;
    }

    /**
     * [makeServerDirectory description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    private function makeServerDirectory(Request $request)
    {
        $path = $this->serverPath . '/' . str_slug($request->name, '-');
        if (!File::exists($path)) {
            File::makeDirectory($path, null, true, true);
        }

        return $path;
    }

    /**
     * [initDirectory description]
     * @param  Request $request [description]
     * @param  boolean $mode    [description]
     * @return [type]           [description]
     */
    private function initDirectory(Request $request, $mode = true)
    {
        $generatorPath    = $this->generatorPath . '/' . str_slug($request->name, '-');
        $this->serverPath = $generatorPath . '/server_' . str_slug($request->name, '-');
        $this->clientPath = $generatorPath . '/' . str_slug($request->name, '-');
        if (File::exists($generatorPath)) {
            File::deleteDirectory($generatorPath, $mode);
        }

        File::makeDirectory($this->serverPath, null, true, true);
        File::makeDirectory($this->clientPath, null, true, true);
        return $generatorPath;

    }

    /**
     * [zip description]
     * @param  Request $request [description]
     * @return [type]           [description]
     */
    private function zip(Request $request)
    {

        $fileName = Carbon::now()->format('Y_m_d_His') . '_' . str_slug($request->name, '-') . '.zip';
        $file     = config('qsoft-generator.download_path') . '/' . $fileName;

        if (File::exists($this->generatorPath)) {
            Zipper::make($file)->add($this->generatorPath);
            return $fileName;
        } else {
            return false;
        }

    }
}
